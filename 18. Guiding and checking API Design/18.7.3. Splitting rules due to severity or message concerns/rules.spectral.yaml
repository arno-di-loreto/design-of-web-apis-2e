aliases:
  CollectionResources:
    - $.paths[?(!@property.match(/}$/))]
  UnitResources:
    - $.paths[?(@property.match(/}$/))]
  SearchOperations:
    - "#CollectionResources.get"
  
rules:

  search-q-unique-rule-wrong-severity:
    description: > 
      A search operation may define a q filter for complex searches.
      A q parameter must be in query, optional, and of type string.
    message: "{{error}}"
    severity: info 
    given:
      - "#SearchOperations"
    then:
      - field: parameters
        function: schema
        functionOptions:
          schema:
            type: array
            contains:
              properties:
                name:
                  const: q
                in:
                  const: query
                #required:
                #  const: "false"
                schema:
                  const:
                    type: string

  search-q-defined: 
    description: A search operation may define a q filter for complex searches
    message: "{{error}}"
    severity: info # MAY so info severity
    given:
      - "#SearchOperations"
    then:
      - field: parameters
        function: schema
        functionOptions:
          schema:
            type: array
            contains:
              properties:
                name:
                  const: q

  search-q-valid:
    description: When defined, a q parameter must be in query, optional, and of type string
    message: "{{error}}"
    severity: error # MUST so error severity
    given:
        # Filtering on q because search-q-defined ensure it is defined
      - "#SearchOperations.parameters[?(@.name === 'q')]"
    then: # The feedback may not be super clear (you can split the rule to clarify)
      - field: in
        function: enumeration # pattern is also an option here
        functionOptions:
          values:
            - query
      - field: required
        function: falsy  # undefined or false (q is optional)
      - field: schema    # Checking the schema field
        function: schema # with the schema function
        functionOptions:
          schema:        # JSON Schema of expected JSON Schema
            const:
              type: string